! This file is roughly equivalent to 45 of the first 47 rules
! of apertium-eng-spa.eng-spa.t1x

! This should be consistent with
! http://wiki.apertium.org/wiki/User:Popcorndude/Recursive_Transfer/Formalism
! as of most recent commit (3/13/19 20:00 UTC if I've forgotten to update this)

number = sg pl ND ;
gender = m f mf GD ;
mode = comp sup pos sint ;

NOM.number./gender -> 1: @n {1} | 1: @np {1} ;

! Lines 4989-5328 (dates)
weekday = sunday monday tuesday wednesday thursday friday saturday ;
month = january february march april may june
        july august september november december ;

monthdate -> 1: the@det.def.sp @num.ord of@pr $month@n
                {2 _2 3 _3 4(gender=m, number=sg)} |
             3: the@det.def.sp @num.ord {2} |
             1: @num $month@n {1 _1 de@pr 2} ;
caldate -> 2: monthdate {1} |
           1: monthdate @num {1 _1 de@pr _ 2} ;
date -> 2: caldate {el@det.def.m.sg 1} |
        1: weekday caldate {el@det.def.[1.gender].[1.number_tl] _ 1 _1 2} |
        2: weekday {el@det.def.[1.gender].[1.number_tl] _ 1} ;

PP -> 3: @pr @n {1 2} |
      2: on@pr date {2} ;

! Lines 5329-8545 (adjectives)
! the rules beginning on lines 6408 (adj num adj nom) and 6852 (adv pp nom)
! were skipped because I'm not entirely sure what they're doing
CONJ -> 1: @cnjcoo {1} | 1: @cm {1} ;
AP./gender.mode/ -> 2: @adj.$mode {1(gender=$gender)} |
                    1: @adv @adj.$mode {1 _1 2(gender=$gender)} |
                    1: @preadv @adj.$mode {1 _1 2(gender=$gender)} |
                    1: AP.$mode CONJ AP.$mode
                       {1(gender=$gender) _1 2 _2 3(gender=$gender)} |
                    1: @apos AP.$mode @apos {1 _1 2(gender=$gender) _2 3} ;
NA.number./gender -> 2: NOM.$number {1} |
                        ! don't bother writing gender back to noun
                     1: AP NA.$number
                        {2 _1 1(number=$number, gender=2.gender)} |
                     2: @num NA.$number {1 _1 2(gender=$gender)} |
                     2: @apos NP.$number @apos {1 _1 2(gender=$gender) _2 3} ;

NP.number./gender -> 1: all@predet NP.$gender(number=pl)
                        {1(number=pl, gender=$gender) _
                         el@det.def.$gender.pl _1 2} |
                     2: @det NP.$number.$gender
                        {1(number=$number, gender=$gender) _1 2} |
                     2: NP.$number {1} |
                     1: such\ a@det.ind.sg @adj NOM.$number
                        {un@det.ind.[3.gender].sg _1 3 _2 tan@preadv 2} ;

! we'll probably want to add the NP/NA and % syntax back in later
! due to general clutteredness
! also something like >1 in the output meaning
! "1(x=$x, y=$y, ...)" for every node variable